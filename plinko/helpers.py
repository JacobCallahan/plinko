# -*- encoding: utf-8 -*-
"""A collection of miscellaneous helpers that don't quite fit in."""
import yaml
from pathlib import Path
from logzero import logger


def import_yaml(fpath):
    imported = {}
    with Path(fpath).open() as opened:
        try:
            imported = yaml.load(opened)
        except Exception as e:
            logger.warning(f"Unable to load {fpath} due to {e}")
    return imported


def normalize(reg_string, prefer_spaces=True):
    """Make sure everything is lowercase and remove _ and -"""
    space = " " if prefer_spaces else ""
    return [
        x
        for x in reg_string.lower()
        .replace("_", " ")
        .replace("/", " ")
        .replace("-", space)
        .replace("s.py", "")
        .replace(".py", "")
        .split()
    ]


def match_all(needles, haystack):
    """check to see if all needles are in the haystack"""
    if not isinstance(needles, list) or not isinstance(haystack, list):
        logger.debug(
            f"match_all failed with needles: {needles} and haystack: {haystack}"
        )
    logger.debug(f"searching for {needles} in {haystack}")
    found = False
    for needle in needles:
        if needle in haystack:
            found = True
        else:
            found = False
    return found


def get_pt_project_name(pt_export):
    """Strip the project name from the pytest export's rootdir line"""
    with Path(pt_export).open() as pt_file:
        for line in pt_file:
            if "rootdir:" in line:
                return line.split(",")[0].split("/")[-1]


def get_version(diff_file, ix=True):
    """Determine the product version from the diff file name.
    param ix denotes if the diff file was generated by APIx or CLIx
    """
    split_ver = diff_file.split("/")[-1].split("-")
    if "-comp.yaml" in diff_file:
        return split_ver[0]
    else:
        return f"{split_ver[0]}-to{split_ver[2]}"


def write_to_file(data, path, name="results"):
    """Write the data to the specified location, creating path and deleting old contents if necessary"""
    path = Path(path)
    if path.exists():
        logger.warning(f"Deleting previous {name} file: {path}")
        path.unlink()
    path.parent.mkdir(parents=True, exist_ok=True)
    path.touch()
    logger.info(f"Saving {name} to {path}")
    with path.open("w+") as outfile:
        yaml.dump(data, outfile, default_flow_style=False)
